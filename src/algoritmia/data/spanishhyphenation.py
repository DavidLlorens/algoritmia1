#coding: latin1

#< full
class HyphenationTable: #[]load
    rules = """ba 1 0 0
be 1 0 0
bo 1 0 0
bá 1 0 0
bé 1 0 0
bí 1 0 0
bñ 1 0 0
bú 1 0 0
bi 1 0 0
bu 1 0 0
bü 1 0 0
ca 1 0 0
ce 1 0 0
co 1 0 0
cá 1 0 0
cé 1 0 0
cí 1 0 0
cñ 1 0 0
cú 1 0 0
ci 1 0 0
cu 1 0 0
cü 1 0 0
da 1 0 0
de 1 0 0
do 1 0 0
dá 1 0 0
dé 1 0 0
dí 1 0 0
dñ 1 0 0
dú 1 0 0
di 1 0 0
du 1 0 0
dü 1 0 0
fa 1 0 0
fe 1 0 0
fo 1 0 0
fá 1 0 0
fé 1 0 0
fí 1 0 0
fñ 1 0 0
fú 1 0 0
fi 1 0 0
fu 1 0 0
fü 1 0 0
ga 1 0 0
ge 1 0 0
go 1 0 0
gá 1 0 0
gé 1 0 0
gí 1 0 0
gñ 1 0 0
gú 1 0 0
gi 1 0 0
gu 1 0 0
gü 1 0 0
ja 1 0 0
je 1 0 0
jo 1 0 0
já 1 0 0
jé 1 0 0
jí 1 0 0
jñ 1 0 0
jú 1 0 0
ji 1 0 0
ju 1 0 0
jü 1 0 0
ka 1 0 0
ke 1 0 0
ko 1 0 0
ká 1 0 0
ké 1 0 0
kí 1 0 0
kñ 1 0 0
kú 1 0 0
ki 1 0 0
ku 1 0 0
kü 1 0 0
la 1 0 0
le 1 0 0
lo 1 0 0
lá 1 0 0
lé 1 0 0
lí 1 0 0
lñ 1 0 0
lú 1 0 0
li 1 0 0
lu 1 0 0
lü 1 0 0
ma 1 0 0
me 1 0 0
mo 1 0 0
má 1 0 0
mé 1 0 0
mí 1 0 0
mñ 1 0 0
mú 1 0 0
mi 1 0 0
mu 1 0 0
mü 1 0 0
na 1 0 0
ne 1 0 0
no 1 0 0
ná 1 0 0
né 1 0 0
ní 1 0 0
nñ 1 0 0
nú 1 0 0
ni 1 0 0
nu 1 0 0
nü 1 0 0
pa 1 0 0
pe 1 0 0
po 1 0 0
pá 1 0 0
pé 1 0 0
pí 1 0 0
pñ 1 0 0
pú 1 0 0
pi 1 0 0
pu 1 0 0
pü 1 0 0
qa 1 0 0
qe 1 0 0
qo 1 0 0
qá 1 0 0
qé 1 0 0
qí 1 0 0
qñ 1 0 0
qú 1 0 0
qi 1 0 0
qu 1 0 0
qü 1 0 0
ra 1 0 0
re 1 0 0
ro 1 0 0
rá 1 0 0
ré 1 0 0
rí 1 0 0
rñ 1 0 0
rú 1 0 0
ri 1 0 0
ru 1 0 0
rü 1 0 0
sa 1 0 0
se 1 0 0
so 1 0 0
sá 1 0 0
sé 1 0 0
sí 1 0 0
sñ 1 0 0
sú 1 0 0
si 1 0 0
su 1 0 0
sü 1 0 0
ta 1 0 0
te 1 0 0
to 1 0 0
tá 1 0 0
té 1 0 0
tí 1 0 0
tñ 1 0 0
tú 1 0 0
ti 1 0 0
tu 1 0 0
tü 1 0 0
va 1 0 0
ve 1 0 0
vo 1 0 0
vá 1 0 0
vé 1 0 0
ví 1 0 0
vñ 1 0 0
vú 1 0 0
vi 1 0 0
vu 1 0 0
vü 1 0 0
wa 1 0 0
we 1 0 0
wo 1 0 0
wá 1 0 0
wé 1 0 0
wí 1 0 0
wñ 1 0 0
wú 1 0 0
wi 1 0 0
wu 1 0 0
wü 1 0 0
xa 1 0 0
xe 1 0 0
xo 1 0 0
xá 1 0 0
xé 1 0 0
xí 1 0 0
xñ 1 0 0
xú 1 0 0
xi 1 0 0
xu 1 0 0
xü 1 0 0
ya 1 0 0
ye 1 0 0
yo 1 0 0
yá 1 0 0
yé 1 0 0
yí 1 0 0
yñ 1 0 0
yú 1 0 0
yi 1 0 0
yu 1 0 0
yü 1 0 0
za 1 0 0
ze 1 0 0
zo 1 0 0
zá 1 0 0
zé 1 0 0
zí 1 0 0
zñ 1 0 0
zú 1 0 0
zi 1 0 0
zu 1 0 0
zü 1 0 0
óa 1 0 0
óe 1 0 0
óo 1 0 0
óá 1 0 0
óé 1 0 0
óí 1 0 0
óñ 1 0 0
óú 1 0 0
ói 1 0 0
óu 1 0 0
óü 1 0 0
cha 1 2 0 0
che 1 2 0 0
cho 1 2 0 0
chá 1 2 0 0
ché 1 2 0 0
chí 1 2 0 0
chñ 1 2 0 0
chú 1 2 0 0
chi 1 2 0 0
chu 1 2 0 0
chü 1 2 0 0
lla 1 2 0 0
lle 1 2 0 0
llo 1 2 0 0
llá 1 2 0 0
llé 1 2 0 0
llí 1 2 0 0
llñ 1 2 0 0
llú 1 2 0 0
lli 1 2 0 0
llu 1 2 0 0
llü 1 2 0 0
rra 1 2 0 0
rre 1 2 0 0
rro 1 2 0 0
rrá 1 2 0 0
rré 1 2 0 0
rrí 1 2 0 0
rrñ 1 2 0 0
rrú 1 2 0 0
rri 1 2 0 0
rru 1 2 0 0
rrü 1 2 0 0
bla 1 2 0 0
ble 1 2 0 0
blo 1 2 0 0
blá 1 2 0 0
blé 1 2 0 0
blí 1 2 0 0
blñ 1 2 0 0
blú 1 2 0 0
bli 1 2 0 0
blu 1 2 0 0
blü 1 2 0 0
bra 1 2 0 0
bre 1 2 0 0
bro 1 2 0 0
brá 1 2 0 0
bré 1 2 0 0
brí 1 2 0 0
brñ 1 2 0 0
brú 1 2 0 0
bri 1 2 0 0
bru 1 2 0 0
brü 1 2 0 0
cla 1 2 0 0
cle 1 2 0 0
clo 1 2 0 0
clá 1 2 0 0
clé 1 2 0 0
clí 1 2 0 0
clñ 1 2 0 0
clú 1 2 0 0
cli 1 2 0 0
clu 1 2 0 0
clü 1 2 0 0
cra 1 2 0 0
cre 1 2 0 0
cro 1 2 0 0
crá 1 2 0 0
cré 1 2 0 0
crí 1 2 0 0
crñ 1 2 0 0
crú 1 2 0 0
cri 1 2 0 0
cru 1 2 0 0
crü 1 2 0 0
dra 1 2 0 0
dre 1 2 0 0
dro 1 2 0 0
drá 1 2 0 0
dré 1 2 0 0
drí 1 2 0 0
drñ 1 2 0 0
drú 1 2 0 0
dri 1 2 0 0
dru 1 2 0 0
drü 1 2 0 0
fla 1 2 0 0
fle 1 2 0 0
flo 1 2 0 0
flá 1 2 0 0
flé 1 2 0 0
flí 1 2 0 0
flñ 1 2 0 0
flú 1 2 0 0
fli 1 2 0 0
flu 1 2 0 0
flü 1 2 0 0
fra 1 2 0 0
fre 1 2 0 0
fro 1 2 0 0
frá 1 2 0 0
fré 1 2 0 0
frí 1 2 0 0
frñ 1 2 0 0
frú 1 2 0 0
fri 1 2 0 0
fru 1 2 0 0
frü 1 2 0 0
gla 1 2 0 0
gle 1 2 0 0
glo 1 2 0 0
glá 1 2 0 0
glé 1 2 0 0
glí 1 2 0 0
glñ 1 2 0 0
glú 1 2 0 0
gli 1 2 0 0
glu 1 2 0 0
glü 1 2 0 0
gra 1 2 0 0
gre 1 2 0 0
gro 1 2 0 0
grá 1 2 0 0
gré 1 2 0 0
grí 1 2 0 0
grñ 1 2 0 0
grú 1 2 0 0
gri 1 2 0 0
gru 1 2 0 0
grü 1 2 0 0
kla 1 2 0 0
kle 1 2 0 0
klo 1 2 0 0
klá 1 2 0 0
klé 1 2 0 0
klí 1 2 0 0
klñ 1 2 0 0
klú 1 2 0 0
kli 1 2 0 0
klu 1 2 0 0
klü 1 2 0 0
kra 1 2 0 0
kre 1 2 0 0
kro 1 2 0 0
krá 1 2 0 0
kré 1 2 0 0
krí 1 2 0 0
krñ 1 2 0 0
krú 1 2 0 0
kri 1 2 0 0
kru 1 2 0 0
krü 1 2 0 0
pla 1 2 0 0
ple 1 2 0 0
plo 1 2 0 0
plá 1 2 0 0
plé 1 2 0 0
plí 1 2 0 0
plñ 1 2 0 0
plú 1 2 0 0
pli 1 2 0 0
plu 1 2 0 0
plü 1 2 0 0
pra 1 2 0 0
pre 1 2 0 0
pro 1 2 0 0
prá 1 2 0 0
pré 1 2 0 0
prí 1 2 0 0
prñ 1 2 0 0
prú 1 2 0 0
pri 1 2 0 0
pru 1 2 0 0
prü 1 2 0 0
tra 1 2 0 0
tre 1 2 0 0
tro 1 2 0 0
trá 1 2 0 0
tré 1 2 0 0
trí 1 2 0 0
trñ 1 2 0 0
trú 1 2 0 0
tri 1 2 0 0
tru 1 2 0 0
trü 1 2 0 0
bh 0 1 0
dh 0 1 0
fh 0 1 0
gh 0 1 0
jh 0 1 0
kh 0 1 0
lh 0 1 0
mh 0 1 0
nh 0 1 0
ph 0 1 0
qh 0 1 0
rh 0 1 0
sh 0 1 0
th 0 1 0
vh 0 1 0
wh 0 1 0
xh 0 1 0
yh 0 1 0
zh 0 1 0
óh 0 1 0
subr 0 0 2 2 0
subl 0 0 2 2 0
caca. 2 0 0 0 0 0
cacas. 2 0 0 0 0 0 0
caga. 2 0 0 0 0 0
cagas. 2 0 0 0 0 0 0
cago. 2 0 0 0 0 0
cerdo 2 0 0 0 0 0
cola. 2 0 0 0 0 0
colas. 2 0 0 0 0 0 0
culo. 2 0 0 0 0 0
culos. 2 0 0 0 0 0 0
cular. 2 0 0 0 0 0 0
mula. 2 0 0 0 0 0
mulas. 2 0 0 0 0 0 0
pedo. 2 0 0 0 0 0
pedos. 2 0 0 0 0 0 0
peda. 2 0 0 0 0 0
pedas. 2 0 0 0 0 0 0
pito. 2 0 0 0 0 0
pitos. 2 0 0 0 0 0 0
puto. 2 0 0 0 0 0
putos. 2 0 0 0 0 0 0
puta. 2 0 0 0 0 0
putas. 2 0 0 0 0 0 0
loco. 2 0 0 0 0 0
locos. 2 0 0 0 0 0 0
loca. 2 0 0 0 0 0
locas. 2 0 0 0 0 0 0
moco. 2 0 0 0 0 0
mocos. 2 0 0 0 0 0 0
.caca 0 0 0 0 2"""
#> full
#< load
    def __init__(self, rules=None):
        if rules==None: rules = HyphenationTable.rules
        self.table = dict((i,{}) for i in range(1, 9))
        for line in rules.split('\n'):
            if line.strip():
                ngram, *marks = line.split()
                self.table[len(ngram)][ngram] = [int(n) for n in marks]
    
    def __getitem__(self, length: "int") -> "IMap<str, IList<int>>":
        return self.table[length]
    
    def __contains__(self, length: "int") -> "bool":
        return length in self.table
#> load
